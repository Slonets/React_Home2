import "./home_style.css";
export  default function About()
{
    return(
        <>
            <div className="home">
                <h1>Різниця між функціональними та класовими компонентами в React</h1>

                <h3>Спосіб визначення:</h3>

                <p><strong>Функціональні компоненти:</strong> Визначаються за допомогою JavaScript-функцій. Це зазвичай
                    прості функції, які приймають вхідні дані (props) і повертають React-елемент.</p>

                 <p><strong>Класові компоненти:</strong> Визначаються за допомогою класів ES6. Вони розширюють базовий
                    клас React.Component та використовують метод render() для повернення React-елемента.</p>

                <h3>Спосіб отримання та використання props:</h3>

                <p><strong>Функціональні компоненти:</strong> Отримують props як параметри функції.</p>

                <p><strong>Класові компоненти:</strong> Отримують props через this.props. Компоненти можуть також
                    зберігати внутрішній стан (state) та використовувати методи життєвого циклу.</p>

                <h3>Стан:</h3>

                <p><strong>Функціональні компоненти:</strong> До введення хуків (з React 16.8), функціональні компоненти
                    не мали внутрішнього стану. Введення хуків, таких як useState, дозволило функціональним компонентам
                    використовувати стан.</p>

                <p><strong>Класові компоненти:</strong> Мають внутрішній стан, який можна змінювати за допомогою методу
                    setState().</p>

                <h3>Синтаксична розбіжність:</h3>

                <p><strong>Функціональні компоненти:</strong> Скорочені, більш компактні, особливо з використанням
                    стрілочних функцій та хуків.</p>

                <p><strong>Класові компоненти:</strong> Вимагають більше коду через використання класів та наявність
                    методу render().</p>

                <h3>Життєвий цикл:</h3>

                <p><strong>Функціональні компоненти:</strong> Раніше не мали життєвого циклу. З введенням хуків, можуть
                    використовувати useEffect та інші хуки.</p>

                <p><strong>Класові компоненти:</strong> Мають повний комплекс життєвого циклу, такий як
                    componentDidMount, componentDidUpdate, і componentWillUnmount.</p>

                <p>Зауважте, що з введенням хуків функціональні компоненти набагато потужніші, і вони можуть замінити
                    більшість функціональностей, які раніше були доступні тільки для класових компонентів. У багатьох
                    випадках рекомендується використовувати функціональні компоненти та хуки для нових проектів.</p>

            </div>
        </>
    );
}